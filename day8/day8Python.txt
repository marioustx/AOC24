from icecream import ic
# Define the grid with the given data
grid = [

[".", ".", ".", ".", ".", ".", "#", ".", ".", ".", ".", "#"],
[".", ".", ".", "#", ".", ".", ".", ".", "0", ".", ".", "."],
["#", ".", ".", ".", "#", "0", ".", ".", ".", ".", "#", "."],
[".", ".", "#", ".", ".", ".", ".", "0", ".", ".", ".", "."],
[".", ".", ".", ".", "0", ".", ".", ".", ".", "#", ".", "."],
[".", "#", ".", ".", ".", ".", "A", ".", ".", ".", ".", "."],
[".", ".", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", "A", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "A", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", "."]
]

# Function to print the grid using icecream's ic
def print_grid(grid):
    for row in grid:
        ic("".join(row))

# Function to calculate the distance between antennas and add antinodes
def add_antinodes(grid):
    # Concatenate all rows to form one string
    concatenated_grid = "".join("".join(row) for row in grid)
    
    # Find the positions of the first three antennas
    first_antenna_pos = concatenated_grid.index('0')
    second_antenna_pos = concatenated_grid.index('0', first_antenna_pos + 1)
    third_antenna_pos = concatenated_grid.index('0', second_antenna_pos + 1)
    
    # Calculate distances between antennas
    distance_13 = third_antenna_pos - first_antenna_pos
    distance_12 = second_antenna_pos - first_antenna_pos
    distance_23 = third_antenna_pos - second_antenna_pos
    
    # Add antinodes based on the distances
    # First antinode left to the first antenna at a distance equal to the distance between the first and the third antenna
    if 0 <= first_antenna_pos - distance_13 < len(concatenated_grid):
        concatenated_grid = concatenated_grid[:first_antenna_pos - distance_13] + '$' + concatenated_grid[first_antenna_pos - distance_13 + 1:]
    
    # Second antinode left to the first antenna at a distance equal to the distance between the first and the second antenna
    if 0 <= first_antenna_pos - distance_12 < len(concatenated_grid):
        concatenated_grid = concatenated_grid[:first_antenna_pos - distance_12] + '$' + concatenated_grid[first_antenna_pos - distance_12 + 1:]
    
    # Third antinode right to the third antenna at a distance equal to the distance between the first and the third antenna
    if 0 <= third_antenna_pos + distance_13 < len(concatenated_grid):
        concatenated_grid = concatenated_grid[:third_antenna_pos + distance_13] + '$' + concatenated_grid[third_antenna_pos + distance_13 + 1:]
    
    # Fourth antinode right to the third antenna at a distance equal to the distance between the second and third antenna
    if 0 <= third_antenna_pos + distance_23 < len(concatenated_grid):
        concatenated_grid = concatenated_grid[:third_antenna_pos + distance_23] + '$' + concatenated_grid[third_antenna_pos + distance_23 + 1:]
    
    # Convert the concatenated string back to a grid
    grid_with_antinodes = [list(concatenated_grid[i:i+12]) for i in range(0, len(concatenated_grid), 12)]
    
    return grid_with_antinodes

# Add antinodes to the grid
grid_with_antinodes = add_antinodes(grid)

# Print the grid with antinodes
print_grid(grid_with_antinodes)

# Write the output to a file named 'Output.txt'
with open('day8\Output.txt', 'w') as f:
    for row in grid_with_antinodes:
        f.write("".join(row) + "\n")